-- Expression evaluator.

import List;
import State;

-- Types:
--   State :: string -> int
--   Expr :: Var     (string)
--           | Const (int)
--           | Binop (string, expr, expr)

-- The evaluator itself: takes a state and an expression.
--
-- Parameters:
--   st :: State
--   expr :: Expr
--
-- Returns: 
--  int

public fun evalExpr (st, expr) {
  case expr of
      Var (v)          -> st (v)
    | Const (c)        -> c
    | Binop (op, l, r) -> evalBinop (op, evalExpr (st, l), evalExpr (st, r))
  esac
}

-- The evaluator of a binary operator.
-- 
-- Parameters:
--   op :: string 
--   x, y :: int
--
-- Returns: 
--   int

public fun evalBinop (op, x, y) {
  case op of
      "+"  -> x + y
    | "-"  -> x - y
    | "*"  -> x * y
    | "/"  -> x / y
    | "%"  -> x % y
    | "<"  -> x < y
    | ">"  -> x > y
    | "<=" -> x <= y
    | ">=" -> x >= y
    | "==" -> x == y
    | "!=" -> x != y
    | "&&" -> x && y
    | "!!" -> x !! y
  esac
}
