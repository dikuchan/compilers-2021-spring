-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun exprBinop (op) {
  [s (op), fun (l, op, r) { Binop (op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
        exp = memo $ eta (expr ({
          [Left, { exprBinop ("!!") }],
          [Left, { exprBinop ("&&") }],
          [Nona, {
            exprBinop ("=="),
            exprBinop ("!=")
          }],
          [Nona, {
            exprBinop ("<"),
            exprBinop (">"),
            exprBinop ("<="),
            exprBinop (">=")
          }],
          [Left, {
            exprBinop ("+"),
            exprBinop ("-")
          }],
          [Left, { 
            exprBinop ("*"),
            exprBinop ("/"),
            exprBinop ("%")
          }]
        }, primary));

var simpleStmt = memo $ eta syntax (
    x=lident s[":="] y=exp { Assn (x, y) }
  | kSkip { Skip }
  | kRead x=inbr[s ("("), lident, s (")")] { Read (x) }
  | kWrite x=inbr[s ("("), exp, s (")")] { Write (x) }
);

var stmt = memo $ eta syntax (
    x=simpleStmt s[";"] y=stmt { Seq (x, y) } 
  | simpleStmt
);
   

-- Public top-level parser
public parse = stmt;
             
